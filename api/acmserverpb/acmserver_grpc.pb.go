// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package acmserverpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ACMClient is the client API for ACM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ACMClient interface {
	GetLatestConfig(ctx context.Context, in *GetLatestRawConfigRequest, opts ...grpc.CallOption) (*GetLatestRawConfigResponse, error)
	SaveConfig(ctx context.Context, in *SaveRawConfigRequest, opts ...grpc.CallOption) (*SaveRawConfigResponse, error)
	ListConfig(ctx context.Context, in *ListRawConfigRequest, opts ...grpc.CallOption) (*ListRawConfigResponse, error)
}

type aCMClient struct {
	cc grpc.ClientConnInterface
}

func NewACMClient(cc grpc.ClientConnInterface) ACMClient {
	return &aCMClient{cc}
}

func (c *aCMClient) GetLatestConfig(ctx context.Context, in *GetLatestRawConfigRequest, opts ...grpc.CallOption) (*GetLatestRawConfigResponse, error) {
	out := new(GetLatestRawConfigResponse)
	err := c.cc.Invoke(ctx, "/acmserverpb.ACM/GetLatestConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMClient) SaveConfig(ctx context.Context, in *SaveRawConfigRequest, opts ...grpc.CallOption) (*SaveRawConfigResponse, error) {
	out := new(SaveRawConfigResponse)
	err := c.cc.Invoke(ctx, "/acmserverpb.ACM/SaveConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMClient) ListConfig(ctx context.Context, in *ListRawConfigRequest, opts ...grpc.CallOption) (*ListRawConfigResponse, error) {
	out := new(ListRawConfigResponse)
	err := c.cc.Invoke(ctx, "/acmserverpb.ACM/ListConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ACMServer is the server API for ACM service.
// All implementations must embed UnimplementedACMServer
// for forward compatibility
type ACMServer interface {
	GetLatestConfig(context.Context, *GetLatestRawConfigRequest) (*GetLatestRawConfigResponse, error)
	SaveConfig(context.Context, *SaveRawConfigRequest) (*SaveRawConfigResponse, error)
	ListConfig(context.Context, *ListRawConfigRequest) (*ListRawConfigResponse, error)
	mustEmbedUnimplementedACMServer()
}

// UnimplementedACMServer must be embedded to have forward compatible implementations.
type UnimplementedACMServer struct {
}

func (UnimplementedACMServer) GetLatestConfig(context.Context, *GetLatestRawConfigRequest) (*GetLatestRawConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestConfig not implemented")
}
func (UnimplementedACMServer) SaveConfig(context.Context, *SaveRawConfigRequest) (*SaveRawConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveConfig not implemented")
}
func (UnimplementedACMServer) ListConfig(context.Context, *ListRawConfigRequest) (*ListRawConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfig not implemented")
}
func (UnimplementedACMServer) mustEmbedUnimplementedACMServer() {}

// UnsafeACMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ACMServer will
// result in compilation errors.
type UnsafeACMServer interface {
	mustEmbedUnimplementedACMServer()
}

func RegisterACMServer(s grpc.ServiceRegistrar, srv ACMServer) {
	s.RegisterService(&ACM_ServiceDesc, srv)
}

func _ACM_GetLatestConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestRawConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMServer).GetLatestConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acmserverpb.ACM/GetLatestConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMServer).GetLatestConfig(ctx, req.(*GetLatestRawConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACM_SaveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRawConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMServer).SaveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acmserverpb.ACM/SaveConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMServer).SaveConfig(ctx, req.(*SaveRawConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACM_ListConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRawConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMServer).ListConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acmserverpb.ACM/ListConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMServer).ListConfig(ctx, req.(*ListRawConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ACM_ServiceDesc is the grpc.ServiceDesc for ACM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ACM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "acmserverpb.ACM",
	HandlerType: (*ACMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestConfig",
			Handler:    _ACM_GetLatestConfig_Handler,
		},
		{
			MethodName: "SaveConfig",
			Handler:    _ACM_SaveConfig_Handler,
		},
		{
			MethodName: "ListConfig",
			Handler:    _ACM_ListConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acmserver.proto",
}
